package SoseL21.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractNonTypesystemRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.NonTypesystemRule_Runtime;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.errors.messageTargets.MessageTarget;
import jetbrains.mps.errors.messageTargets.NodeMessageTarget;
import jetbrains.mps.errors.IErrorReporter;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SInterfaceConcept;
import org.jetbrains.mps.openapi.language.SConcept;
import org.jetbrains.mps.openapi.language.SProperty;

public class check_ClassDefinition_NonTypesystemRule extends AbstractNonTypesystemRule_Runtime implements NonTypesystemRule_Runtime {
  public check_ClassDefinition_NonTypesystemRule() {
  }
  public void applyRule(final SNode classDefinition, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    Iterable<SNode> decls = SNodeOperations.ofConcept(SLinkOperations.getChildren(classDefinition, LINKS.content$aNuf), CONCEPTS.Declarations$52);
    for (SNode decl : Sequence.fromIterable(decls)) {
      if (SNodeOperations.getConcept(decl) == CONCEPTS.IntDeclaration$bc) {
        SNode d = (SNode) decl;
        if ((SPropertyOperations.getBoolean(d, PROPS.private$iYli) && SPropertyOperations.getBoolean(d, PROPS.protected$iZhm)) || (SPropertyOperations.getBoolean(d, PROPS.protected$iZhm) && SPropertyOperations.getBoolean(d, PROPS.public$iSGU)) || (SPropertyOperations.getBoolean(d, PROPS.public$iSGU) && SPropertyOperations.getBoolean(d, PROPS.private$iYli)) || (SPropertyOperations.getBoolean(d, PROPS.protected$iZhm) && SPropertyOperations.getBoolean(d, PROPS.public$iSGU) && SPropertyOperations.getBoolean(d, PROPS.private$iYli))) {
          {
            final MessageTarget errorTarget = new NodeMessageTarget();
            IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(decl, "illegal combination of modifiers", "r:a3be9e7c-87f2-4626-a2fe-b4dfe2f3a25c(SoseL21.typesystem)", "9201983977795727755", null, errorTarget);
          }
        }
      }

      if (SNodeOperations.getConcept(decl) == CONCEPTS.BooleanDeclaration$9c) {
        SNode d = (SNode) decl;
        if ((SPropertyOperations.getBoolean(d, PROPS.private$bi1D) && SPropertyOperations.getBoolean(d, PROPS.protected$bh5_)) || (SPropertyOperations.getBoolean(d, PROPS.protected$bh5_) && SPropertyOperations.getBoolean(d, PROPS.public$bgoy)) || (SPropertyOperations.getBoolean(d, PROPS.public$bgoy) && SPropertyOperations.getBoolean(d, PROPS.private$bi1D)) || (SPropertyOperations.getBoolean(d, PROPS.protected$bh5_) && SPropertyOperations.getBoolean(d, PROPS.public$bgoy) && SPropertyOperations.getBoolean(d, PROPS.private$bi1D))) {
          {
            final MessageTarget errorTarget = new NodeMessageTarget();
            IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(decl, "illegal combination of modifiers", "r:a3be9e7c-87f2-4626-a2fe-b4dfe2f3a25c(SoseL21.typesystem)", "9201983977796035324", null, errorTarget);
          }
        }
      }
    }

    Iterable<SNode> constructors = SNodeOperations.ofConcept(SLinkOperations.getChildren(classDefinition, LINKS.content$aNuf), CONCEPTS.ClassConstructor$Tb);
    for (SNode constr : Sequence.fromIterable(constructors)) {
      if (!(SPropertyOperations.getString(constr, PROPS.name$MnvL).equals(SPropertyOperations.getString(classDefinition, PROPS.name$MnvL)))) {
        {
          final MessageTarget errorTarget = new NodeMessageTarget();
          IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(constr, "constructor has to have the same name as class", "r:a3be9e7c-87f2-4626-a2fe-b4dfe2f3a25c(SoseL21.typesystem)", "9201983977797276745", null, errorTarget);
        }
      }
    }
  }
  public SAbstractConcept getApplicableConcept() {
    return CONCEPTS.ClassDefinition$nq;
  }
  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    return new IsApplicableStatus(argument.getConcept().isSubConceptOf(getApplicableConcept()), null);
  }
  public boolean overrides() {
    return false;
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink content$aNuf = MetaAdapterFactory.getContainmentLink(0x675036cf295d4c04L, 0xa4188a54769c9d5cL, 0x7fb403ac712d3333L, 0x7fb403ac712d33adL, "content");
  }

  private static final class CONCEPTS {
    /*package*/ static final SInterfaceConcept Declarations$52 = MetaAdapterFactory.getInterfaceConcept(0x675036cf295d4c04L, 0xa4188a54769c9d5cL, 0x59343f22639ad323L, "SoseL21.structure.Declarations");
    /*package*/ static final SConcept IntDeclaration$bc = MetaAdapterFactory.getConcept(0x675036cf295d4c04L, 0xa4188a54769c9d5cL, 0x59343f22639a8057L, "SoseL21.structure.IntDeclaration");
    /*package*/ static final SConcept BooleanDeclaration$9c = MetaAdapterFactory.getConcept(0x675036cf295d4c04L, 0xa4188a54769c9d5cL, 0x59343f22639a8083L, "SoseL21.structure.BooleanDeclaration");
    /*package*/ static final SConcept ClassConstructor$Tb = MetaAdapterFactory.getConcept(0x675036cf295d4c04L, 0xa4188a54769c9d5cL, 0x7fb403ac715f17faL, "SoseL21.structure.ClassConstructor");
    /*package*/ static final SConcept ClassDefinition$nq = MetaAdapterFactory.getConcept(0x675036cf295d4c04L, 0xa4188a54769c9d5cL, 0x7fb403ac712d3333L, "SoseL21.structure.ClassDefinition");
  }

  private static final class PROPS {
    /*package*/ static final SProperty private$iYli = MetaAdapterFactory.getProperty(0x675036cf295d4c04L, 0xa4188a54769c9d5cL, 0x59343f22639a8057L, 0x7fb403ac714df382L, "private");
    /*package*/ static final SProperty protected$iZhm = MetaAdapterFactory.getProperty(0x675036cf295d4c04L, 0xa4188a54769c9d5cL, 0x59343f22639a8057L, 0x7fb403ac714df386L, "protected");
    /*package*/ static final SProperty public$iSGU = MetaAdapterFactory.getProperty(0x675036cf295d4c04L, 0xa4188a54769c9d5cL, 0x59343f22639a8057L, 0x7fb403ac714df37fL, "public");
    /*package*/ static final SProperty private$bi1D = MetaAdapterFactory.getProperty(0x675036cf295d4c04L, 0xa4188a54769c9d5cL, 0x59343f22639a8083L, 0x7fb403ac715a590eL, "private");
    /*package*/ static final SProperty protected$bh5_ = MetaAdapterFactory.getProperty(0x675036cf295d4c04L, 0xa4188a54769c9d5cL, 0x59343f22639a8083L, 0x7fb403ac715a590aL, "protected");
    /*package*/ static final SProperty public$bgoy = MetaAdapterFactory.getProperty(0x675036cf295d4c04L, 0xa4188a54769c9d5cL, 0x59343f22639a8083L, 0x7fb403ac715a5907L, "public");
    /*package*/ static final SProperty name$MnvL = MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name");
  }
}
