package SoseL21.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractNonTypesystemRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.NonTypesystemRule_Runtime;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import SoseL21.behavior.StatementContainer__BehaviorDescriptor;
import java.util.Set;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.errors.messageTargets.MessageTarget;
import jetbrains.mps.errors.messageTargets.NodeMessageTarget;
import jetbrains.mps.errors.IErrorReporter;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import org.jetbrains.mps.openapi.language.SInterfaceConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SProperty;

public class check_StatementContainer_NonTypesystemRule extends AbstractNonTypesystemRule_Runtime implements NonTypesystemRule_Runtime {
  public check_StatementContainer_NonTypesystemRule() {
  }
  public void applyRule(final SNode statementContainer, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    Iterable<SNode> mySeq1 = SNodeOperations.ofConcept(StatementContainer__BehaviorDescriptor.getStatements_id6on7nvqLDw8.invoke(statementContainer), CONCEPTS.Declarations$52);
    Set<String> names = SetSequence.fromSet(new HashSet<String>());
    for (SNode dec : Sequence.fromIterable(mySeq1)) {
      if (SetSequence.fromSet(names).contains(SPropertyOperations.getString(dec, PROPS.name$MnvL))) {
        {
          final MessageTarget errorTarget = new NodeMessageTarget();
          IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(dec, "Duplicate name: " + SPropertyOperations.getString(dec, PROPS.name$MnvL), "r:a3be9e7c-87f2-4626-a2fe-b4dfe2f3a25c(SoseL21.typesystem)", "4757325087387099871", null, errorTarget);
        }
      }
      SetSequence.fromSet(names).addElement(SPropertyOperations.getString(dec, PROPS.name$MnvL));
    }
  }
  public SAbstractConcept getApplicableConcept() {
    return CONCEPTS.StatementContainer$AH;
  }
  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    return new IsApplicableStatus(argument.getConcept().isSubConceptOf(getApplicableConcept()), null);
  }
  public boolean overrides() {
    return false;
  }

  private static final class CONCEPTS {
    /*package*/ static final SInterfaceConcept Declarations$52 = MetaAdapterFactory.getInterfaceConcept(0x675036cf295d4c04L, 0xa4188a54769c9d5cL, 0x59343f22639ad323L, "SoseL21.structure.Declarations");
    /*package*/ static final SInterfaceConcept StatementContainer$AH = MetaAdapterFactory.getInterfaceConcept(0x675036cf295d4c04L, 0xa4188a54769c9d5cL, 0x66171d77dac697fcL, "SoseL21.structure.StatementContainer");
  }

  private static final class PROPS {
    /*package*/ static final SProperty name$MnvL = MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name");
  }
}
