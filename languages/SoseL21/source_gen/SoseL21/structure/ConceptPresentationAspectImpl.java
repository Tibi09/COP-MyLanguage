package SoseL21.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_ArithmeticBinaryExpression;
  private ConceptPresentation props_AssignmentExpression;
  private ConceptPresentation props_BinaryComparisonExpression;
  private ConceptPresentation props_BinaryExpression;
  private ConceptPresentation props_BooleanDeclaration;
  private ConceptPresentation props_BooleanLiteral;
  private ConceptPresentation props_Declarations;
  private ConceptPresentation props_DivExpression;
  private ConceptPresentation props_ElseStatement;
  private ConceptPresentation props_EmptyStatement;
  private ConceptPresentation props_EqualsExpression;
  private ConceptPresentation props_Expression;
  private ConceptPresentation props_ExpressionStatement;
  private ConceptPresentation props_ForLoop;
  private ConceptPresentation props_Function;
  private ConceptPresentation props_GreaterEqualsExpression;
  private ConceptPresentation props_GreaterThanExpression;
  private ConceptPresentation props_IfStatement;
  private ConceptPresentation props_IntDeclaration;
  private ConceptPresentation props_LowerEqualsExpression;
  private ConceptPresentation props_LowerThanExpression;
  private ConceptPresentation props_MinusExpression;
  private ConceptPresentation props_MulExpression;
  private ConceptPresentation props_MyBooleanType;
  private ConceptPresentation props_MyIntegerType;
  private ConceptPresentation props_MyType;
  private ConceptPresentation props_MyVoidType;
  private ConceptPresentation props_NotEqualsExpression;
  private ConceptPresentation props_NumberLiteral;
  private ConceptPresentation props_ParameterDeclaration;
  private ConceptPresentation props_PlusExpression;
  private ConceptPresentation props_Reference;
  private ConceptPresentation props_SpecialEmptyStatementForReturnExpression;
  private ConceptPresentation props_Statement;
  private ConceptPresentation props_StatementContainer;
  private ConceptPresentation props_VariableReference;
  private ConceptPresentation props_WhileLoop;
  private ConceptPresentation props_Workspace;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.ArithmeticBinaryExpression:
        if (props_ArithmeticBinaryExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_ArithmeticBinaryExpression = cpb.create();
        }
        return props_ArithmeticBinaryExpression;
      case LanguageConceptSwitch.AssignmentExpression:
        if (props_AssignmentExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("=");
          props_AssignmentExpression = cpb.create();
        }
        return props_AssignmentExpression;
      case LanguageConceptSwitch.BinaryComparisonExpression:
        if (props_BinaryComparisonExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_BinaryComparisonExpression = cpb.create();
        }
        return props_BinaryComparisonExpression;
      case LanguageConceptSwitch.BinaryExpression:
        if (props_BinaryExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("BinaryExpression");
          props_BinaryExpression = cpb.create();
        }
        return props_BinaryExpression;
      case LanguageConceptSwitch.BooleanDeclaration:
        if (props_BooleanDeclaration == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_BooleanDeclaration = cpb.create();
        }
        return props_BooleanDeclaration;
      case LanguageConceptSwitch.BooleanLiteral:
        if (props_BooleanLiteral == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("BooleanLiteral");
          props_BooleanLiteral = cpb.create();
        }
        return props_BooleanLiteral;
      case LanguageConceptSwitch.Declarations:
        if (props_Declarations == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_Declarations = cpb.create();
        }
        return props_Declarations;
      case LanguageConceptSwitch.DivExpression:
        if (props_DivExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("/");
          props_DivExpression = cpb.create();
        }
        return props_DivExpression;
      case LanguageConceptSwitch.ElseStatement:
        if (props_ElseStatement == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("else");
          props_ElseStatement = cpb.create();
        }
        return props_ElseStatement;
      case LanguageConceptSwitch.EmptyStatement:
        if (props_EmptyStatement == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_EmptyStatement = cpb.create();
        }
        return props_EmptyStatement;
      case LanguageConceptSwitch.EqualsExpression:
        if (props_EqualsExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("==");
          props_EqualsExpression = cpb.create();
        }
        return props_EqualsExpression;
      case LanguageConceptSwitch.Expression:
        if (props_Expression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_Expression = cpb.create();
        }
        return props_Expression;
      case LanguageConceptSwitch.ExpressionStatement:
        if (props_ExpressionStatement == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_ExpressionStatement = cpb.create();
        }
        return props_ExpressionStatement;
      case LanguageConceptSwitch.ForLoop:
        if (props_ForLoop == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_ForLoop = cpb.create();
        }
        return props_ForLoop;
      case LanguageConceptSwitch.Function:
        if (props_Function == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Function = cpb.create();
        }
        return props_Function;
      case LanguageConceptSwitch.GreaterEqualsExpression:
        if (props_GreaterEqualsExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation(">=");
          props_GreaterEqualsExpression = cpb.create();
        }
        return props_GreaterEqualsExpression;
      case LanguageConceptSwitch.GreaterThanExpression:
        if (props_GreaterThanExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation(">");
          props_GreaterThanExpression = cpb.create();
        }
        return props_GreaterThanExpression;
      case LanguageConceptSwitch.IfStatement:
        if (props_IfStatement == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_IfStatement = cpb.create();
        }
        return props_IfStatement;
      case LanguageConceptSwitch.IntDeclaration:
        if (props_IntDeclaration == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_IntDeclaration = cpb.create();
        }
        return props_IntDeclaration;
      case LanguageConceptSwitch.LowerEqualsExpression:
        if (props_LowerEqualsExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("<=");
          props_LowerEqualsExpression = cpb.create();
        }
        return props_LowerEqualsExpression;
      case LanguageConceptSwitch.LowerThanExpression:
        if (props_LowerThanExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("<");
          props_LowerThanExpression = cpb.create();
        }
        return props_LowerThanExpression;
      case LanguageConceptSwitch.MinusExpression:
        if (props_MinusExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("-");
          props_MinusExpression = cpb.create();
        }
        return props_MinusExpression;
      case LanguageConceptSwitch.MulExpression:
        if (props_MulExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("*");
          props_MulExpression = cpb.create();
        }
        return props_MulExpression;
      case LanguageConceptSwitch.MyBooleanType:
        if (props_MyBooleanType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("boolean");
          props_MyBooleanType = cpb.create();
        }
        return props_MyBooleanType;
      case LanguageConceptSwitch.MyIntegerType:
        if (props_MyIntegerType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("int");
          props_MyIntegerType = cpb.create();
        }
        return props_MyIntegerType;
      case LanguageConceptSwitch.MyType:
        if (props_MyType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_MyType = cpb.create();
        }
        return props_MyType;
      case LanguageConceptSwitch.MyVoidType:
        if (props_MyVoidType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("void");
          props_MyVoidType = cpb.create();
        }
        return props_MyVoidType;
      case LanguageConceptSwitch.NotEqualsExpression:
        if (props_NotEqualsExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("!=");
          props_NotEqualsExpression = cpb.create();
        }
        return props_NotEqualsExpression;
      case LanguageConceptSwitch.NumberLiteral:
        if (props_NumberLiteral == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("NumberLiteral");
          props_NumberLiteral = cpb.create();
        }
        return props_NumberLiteral;
      case LanguageConceptSwitch.ParameterDeclaration:
        if (props_ParameterDeclaration == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_ParameterDeclaration = cpb.create();
        }
        return props_ParameterDeclaration;
      case LanguageConceptSwitch.PlusExpression:
        if (props_PlusExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("+");
          props_PlusExpression = cpb.create();
        }
        return props_PlusExpression;
      case LanguageConceptSwitch.Reference:
        if (props_Reference == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Reference = cpb.create();
        }
        return props_Reference;
      case LanguageConceptSwitch.SpecialEmptyStatementForReturnExpression:
        if (props_SpecialEmptyStatementForReturnExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("empty");
          props_SpecialEmptyStatementForReturnExpression = cpb.create();
        }
        return props_SpecialEmptyStatementForReturnExpression;
      case LanguageConceptSwitch.Statement:
        if (props_Statement == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_Statement = cpb.create();
        }
        return props_Statement;
      case LanguageConceptSwitch.StatementContainer:
        if (props_StatementContainer == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_StatementContainer = cpb.create();
        }
        return props_StatementContainer;
      case LanguageConceptSwitch.VariableReference:
        if (props_VariableReference == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByReference(0x675036cf295d4c04L, 0xa4188a54769c9d5cL, 0x276ac52d000e11b2L, 0x276ac52d000e11b3L, "variable", "", "");
          props_VariableReference = cpb.create();
        }
        return props_VariableReference;
      case LanguageConceptSwitch.WhileLoop:
        if (props_WhileLoop == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_WhileLoop = cpb.create();
        }
        return props_WhileLoop;
      case LanguageConceptSwitch.Workspace:
        if (props_Workspace == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Workspace = cpb.create();
        }
        return props_Workspace;
    }
    return null;
  }
}
