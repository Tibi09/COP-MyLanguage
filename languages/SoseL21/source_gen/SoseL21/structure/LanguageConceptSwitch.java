package SoseL21.structure;

/*Generated by MPS */

import jetbrains.mps.lang.smodel.LanguageConceptIndex;
import jetbrains.mps.lang.smodel.LanguageConceptIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public final class LanguageConceptSwitch {
  private final LanguageConceptIndex myIndex;
  public static final int ActualParameters = 0;
  public static final int ArithmeticBinaryExpression = 1;
  public static final int AssignmentExpression = 2;
  public static final int BinaryComparisonExpression = 3;
  public static final int BinaryExpression = 4;
  public static final int BooleanDeclaration = 5;
  public static final int BooleanLiteral = 6;
  public static final int Declarations = 7;
  public static final int DivExpression = 8;
  public static final int ElseStatement = 9;
  public static final int EmptyStatement = 10;
  public static final int EqualsExpression = 11;
  public static final int Expression = 12;
  public static final int ExpressionStatement = 13;
  public static final int ForLoop = 14;
  public static final int Function = 15;
  public static final int FunctionCall = 16;
  public static final int GreaterEqualsExpression = 17;
  public static final int GreaterThanExpression = 18;
  public static final int IfStatement = 19;
  public static final int IntDeclaration = 20;
  public static final int Literals = 21;
  public static final int LowerEqualsExpression = 22;
  public static final int LowerThanExpression = 23;
  public static final int MinusExpression = 24;
  public static final int MulExpression = 25;
  public static final int MyBooleanType = 26;
  public static final int MyIntegerType = 27;
  public static final int MyType = 28;
  public static final int MyVoidType = 29;
  public static final int NotEqualsExpression = 30;
  public static final int NumberLiteral = 31;
  public static final int ParameterDeclaration = 32;
  public static final int PlusExpression = 33;
  public static final int Reference = 34;
  public static final int SpecialEmptyStatementForReturnExpression = 35;
  public static final int Statement = 36;
  public static final int StatementContainer = 37;
  public static final int VariableReference = 38;
  public static final int WhileLoop = 39;
  public static final int Workspace = 40;

  public LanguageConceptSwitch() {
    LanguageConceptIndexBuilder builder = new LanguageConceptIndexBuilder(0x675036cf295d4c04L, 0xa4188a54769c9d5cL);
    builder.put(0x3830bb00cf88dda3L, ActualParameters);
    builder.put(0x276ac52cfffe5d11L, ArithmeticBinaryExpression);
    builder.put(0x43815c44f0ba4178L, AssignmentExpression);
    builder.put(0x276ac52cfffb85caL, BinaryComparisonExpression);
    builder.put(0x2d43019ee0ebb17L, BinaryExpression);
    builder.put(0x59343f22639a8083L, BooleanDeclaration);
    builder.put(0x561e0268e531fa1aL, BooleanLiteral);
    builder.put(0x59343f22639ad323L, Declarations);
    builder.put(0x2d43019ee10c1f1L, DivExpression);
    builder.put(0x420569f62aafe104L, ElseStatement);
    builder.put(0x2d43019ee087e53L, EmptyStatement);
    builder.put(0x2d43019ee11846dL, EqualsExpression);
    builder.put(0x2d43019ee0d757bL, Expression);
    builder.put(0x5321d9ecfadfa2d1L, ExpressionStatement);
    builder.put(0x43815c44f0b1464aL, ForLoop);
    builder.put(0x35df3cf91acb59d9L, Function);
    builder.put(0x3689f6de4302b35aL, FunctionCall);
    builder.put(0x276ac52cfffb7a6bL, GreaterEqualsExpression);
    builder.put(0x276ac52cfffb6cedL, GreaterThanExpression);
    builder.put(0x66171d77dac8cadaL, IfStatement);
    builder.put(0x59343f22639a8057L, IntDeclaration);
    builder.put(0x3830bb00cf823681L, Literals);
    builder.put(0x276ac52cfffb7a6cL, LowerEqualsExpression);
    builder.put(0x276ac52cfffb7a6aL, LowerThanExpression);
    builder.put(0x2d43019ee0e19acL, MinusExpression);
    builder.put(0x2d43019ee0e19ddL, MulExpression);
    builder.put(0x35df3cf91ae9ca47L, MyBooleanType);
    builder.put(0x35df3cf91ae9ca46L, MyIntegerType);
    builder.put(0x35df3cf91ae9ca37L, MyType);
    builder.put(0x35df3cf91ae9ca48L, MyVoidType);
    builder.put(0x2d43019ee1231d8L, NotEqualsExpression);
    builder.put(0x2d43019ee0a41c1L, NumberLiteral);
    builder.put(0x4514668c8feb0458L, ParameterDeclaration);
    builder.put(0x2d43019ee0d8120L, PlusExpression);
    builder.put(0x59343f22639ad30bL, Reference);
    builder.put(0x35df3cf91af6780aL, SpecialEmptyStatementForReturnExpression);
    builder.put(0x59343f22639a8052L, Statement);
    builder.put(0x66171d77dac697fcL, StatementContainer);
    builder.put(0x276ac52d000e11b2L, VariableReference);
    builder.put(0x43815c44f09f6ac5L, WhileLoop);
    builder.put(0x59343f22639a8002L, Workspace);
    myIndex = builder.seal();
  }

  /*package*/ int index(SConceptId cid) {
    return myIndex.index(cid);
  }

  public int index(SAbstractConcept concept) {
    return myIndex.index(concept);
  }
}
