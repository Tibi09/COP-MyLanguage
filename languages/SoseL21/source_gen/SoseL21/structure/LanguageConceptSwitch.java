package SoseL21.structure;

/*Generated by MPS */

import jetbrains.mps.lang.smodel.LanguageConceptIndex;
import jetbrains.mps.lang.smodel.LanguageConceptIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public final class LanguageConceptSwitch {
  private final LanguageConceptIndex myIndex;
  public static final int ActualParameters = 0;
  public static final int ArithmeticBinaryExpression = 1;
  public static final int AssignmentExpression = 2;
  public static final int BinaryComparisonExpression = 3;
  public static final int BinaryExpression = 4;
  public static final int BooleanDeclaration = 5;
  public static final int BooleanLiteral = 6;
  public static final int ClassBody = 7;
  public static final int ClassConstructor = 8;
  public static final int ClassDefinition = 9;
  public static final int ClassModifiers = 10;
  public static final int Declarations = 11;
  public static final int DivExpression = 12;
  public static final int ElseStatement = 13;
  public static final int EmptyStatement = 14;
  public static final int EqualsExpression = 15;
  public static final int Expression = 16;
  public static final int ExpressionStatement = 17;
  public static final int Extends = 18;
  public static final int ForLoop = 19;
  public static final int Function = 20;
  public static final int FunctionCall = 21;
  public static final int GreaterEqualsExpression = 22;
  public static final int GreaterThanExpression = 23;
  public static final int IfStatement = 24;
  public static final int IntDeclaration = 25;
  public static final int Literals = 26;
  public static final int LowerEqualsExpression = 27;
  public static final int LowerThanExpression = 28;
  public static final int MinusExpression = 29;
  public static final int MulExpression = 30;
  public static final int MyBooleanType = 31;
  public static final int MyIntegerType = 32;
  public static final int MyType = 33;
  public static final int MyVoidType = 34;
  public static final int NotEqualsExpression = 35;
  public static final int NumberLiteral = 36;
  public static final int ParameterDeclaration = 37;
  public static final int PlusExpression = 38;
  public static final int Private = 39;
  public static final int Protected = 40;
  public static final int Public = 41;
  public static final int Reference = 42;
  public static final int SpecialEmptyStatementForReturnExpression = 43;
  public static final int Statement = 44;
  public static final int StatementContainer = 45;
  public static final int StringDeclaration = 46;
  public static final int VariableReference = 47;
  public static final int WhileLoop = 48;
  public static final int Workspace = 49;

  public LanguageConceptSwitch() {
    LanguageConceptIndexBuilder builder = new LanguageConceptIndexBuilder(0x675036cf295d4c04L, 0xa4188a54769c9d5cL);
    builder.put(0x3830bb00cf88dda3L, ActualParameters);
    builder.put(0x276ac52cfffe5d11L, ArithmeticBinaryExpression);
    builder.put(0x43815c44f0ba4178L, AssignmentExpression);
    builder.put(0x276ac52cfffb85caL, BinaryComparisonExpression);
    builder.put(0x2d43019ee0ebb17L, BinaryExpression);
    builder.put(0x59343f22639a8083L, BooleanDeclaration);
    builder.put(0x561e0268e531fa1aL, BooleanLiteral);
    builder.put(0x7fb403ac71399ef1L, ClassBody);
    builder.put(0x7fb403ac715f17faL, ClassConstructor);
    builder.put(0x7fb403ac712d3333L, ClassDefinition);
    builder.put(0x7fb403ac714047ecL, ClassModifiers);
    builder.put(0x59343f22639ad323L, Declarations);
    builder.put(0x2d43019ee10c1f1L, DivExpression);
    builder.put(0x420569f62aafe104L, ElseStatement);
    builder.put(0x2d43019ee087e53L, EmptyStatement);
    builder.put(0x2d43019ee11846dL, EqualsExpression);
    builder.put(0x2d43019ee0d757bL, Expression);
    builder.put(0x5321d9ecfadfa2d1L, ExpressionStatement);
    builder.put(0x5e174162fdf4bd5eL, Extends);
    builder.put(0x43815c44f0b1464aL, ForLoop);
    builder.put(0x35df3cf91acb59d9L, Function);
    builder.put(0x3689f6de4302b35aL, FunctionCall);
    builder.put(0x276ac52cfffb7a6bL, GreaterEqualsExpression);
    builder.put(0x276ac52cfffb6cedL, GreaterThanExpression);
    builder.put(0x66171d77dac8cadaL, IfStatement);
    builder.put(0x59343f22639a8057L, IntDeclaration);
    builder.put(0x3830bb00cf823681L, Literals);
    builder.put(0x276ac52cfffb7a6cL, LowerEqualsExpression);
    builder.put(0x276ac52cfffb7a6aL, LowerThanExpression);
    builder.put(0x2d43019ee0e19acL, MinusExpression);
    builder.put(0x2d43019ee0e19ddL, MulExpression);
    builder.put(0x35df3cf91ae9ca47L, MyBooleanType);
    builder.put(0x35df3cf91ae9ca46L, MyIntegerType);
    builder.put(0x35df3cf91ae9ca37L, MyType);
    builder.put(0x35df3cf91ae9ca48L, MyVoidType);
    builder.put(0x2d43019ee1231d8L, NotEqualsExpression);
    builder.put(0x2d43019ee0a41c1L, NumberLiteral);
    builder.put(0x4514668c8feb0458L, ParameterDeclaration);
    builder.put(0x2d43019ee0d8120L, PlusExpression);
    builder.put(0x7fb403ac714047edL, Private);
    builder.put(0x7fb403ac714047f3L, Protected);
    builder.put(0x7fb403ac714047f0L, Public);
    builder.put(0x59343f22639ad30bL, Reference);
    builder.put(0x35df3cf91af6780aL, SpecialEmptyStatementForReturnExpression);
    builder.put(0x59343f22639a8052L, Statement);
    builder.put(0x66171d77dac697fcL, StatementContainer);
    builder.put(0x600d2c8efb351732L, StringDeclaration);
    builder.put(0x276ac52d000e11b2L, VariableReference);
    builder.put(0x43815c44f09f6ac5L, WhileLoop);
    builder.put(0x59343f22639a8002L, Workspace);
    myIndex = builder.seal();
  }

  /*package*/ int index(SConceptId cid) {
    return myIndex.index(cid);
  }

  public int index(SAbstractConcept concept) {
    return myIndex.index(concept);
  }
}
